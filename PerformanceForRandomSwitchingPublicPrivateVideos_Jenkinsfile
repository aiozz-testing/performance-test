pipeline {
    agent any
    parameters {
        string(name: 'VIDEO_ID', defaultValue: '0', description: 'Video id')
        choice(
            name: 'ENVIRONMENT',
            choices: [
                'w3stream.xyz',
                'w3stream.attoaioz.cyou'   
            ],
            description: 'Select the environment to test against'
        )

        string(name: 'THREAD_COUNT', defaultValue: '1', description: 'Number of threads (users) to simulate')
        string(name: 'RAMP_UP_TIME', defaultValue: '1', description: 'Ramp-up time in seconds')
        string(name: 'LOOP_COUNT', defaultValue: '1', description: 'Number of iterations per thread')
    }
    environment {
        JMETER_HOME = '/opt/apache-jmeter-5.6.3/bin';
        TEST_NAME = 'PerformanceForVideo';

    }
    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/aiozz-testing/performance-test.git'
            }
        }
        stage('Set Dynamic Environment') {
            steps {
                script {
                    // Modify the environment variable based on the chosen parameter
                    if (params.ENVIRONMENT == 'w3stream.xyz') {
                        env.API_ENVIRONMENT = 'api.w3stream.xyz'
                    } else if (params.ENVIRONMENT == 'w3stream.attoaioz.cyou') {
                        env.API_ENVIRONMENT = 'api-w3stream.attoaioz.cyou'
                    } else {
                        error "Invalid ENVIRONMENT choice: ${params.ENVIRONMENT}"
                    }
                    echo "API-ENVIRONMENT set to: ${env.API_ENVIRONMENT}"
                }
            }
        }
        stage('Run JMeter Tests') {
            steps {
                script {
                    sh """
                        rm -rf ./results/${TEST_NAME}Results.jtl ./reports/${TEST_NAME}Report &&
                        ${JMETER_HOME}/jmeter -n -t ${TEST_NAME}.jmx \
                            -l ./results/${TEST_NAME}Results.jtl \
                            -e -o ./reports/${TEST_NAME}Report \
                            -JENVIRONMENT=${params.ENVIRONMENT} \
                            -JAPI_ENVIRONMENT=${env.API_ENVIRONMENT} \
                            -JTHREAD_COUNT=${params.THREAD_COUNT} \
                            -JRAMP_UP_TIME=${params.RAMP_UP_TIME} \
                            -JLOOP_COUNT=${params.LOOP_COUNT} \
                            -JVIDEO_ID=${params.VIDEO_ID}
                    """
                }
            }
        }
    }
    post {
        always {
            script {
                try {
                    sh """
                        # Ensure the destination folder exists
                        mkdir -p /var/lib/jenkins/workspace/JmeterReport
                        
                        # Copy the report folder to the destination
                        cp -r ./reports/${TEST_NAME}Report /var/lib/jenkins/workspace/JmeterReport/
                    """
                } catch (Exception e) {
                    echo "Failed to copy report: ${e.getMessage()}"
                }
            }
        }
    }
}
